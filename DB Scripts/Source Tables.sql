CREATE DATABASE SOURCEDB;
USE SOURCEDB;


CREATE TABLE CUSTOMERS(
	CUSTOMER_ID INT PRIMARY KEY,
	NAME VARCHAR(50),
	EMAIL VARCHAR(50),
	SIGNUP_DATE DATE
);
--DROP TABLE CUSTOMERS;

INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (1, 'USER 1', 'USER1@EMAIL.COM', '2-2-2024');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (2, 'USER 2', 'USER2@EMAIL.COM', '3-2-2024');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (3, 'USER 3', 'USER3@EMAIL.COM', '3-4-2024');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (4, 'USER 4', 'USER4@EMAIL.COM', '8-6-2024');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (5, 'USER 5', 'USER5@EMAIL.COM', '6-15-2024');
INSERT INTO CUSTOMERS (CUSTOMER_ID, NAME, EMAIL, SIGNUP_DATE) VALUES (6, 'USER 6', 'USER6@EMAIL.COM', '2-8-2024');

SELECT * FROM CUSTOMERS;



CREATE TABLE ORDERS(
	ORDER_ID INT PRIMARY KEY,
	CUSTOMER_ID INT NOT NULL,
	ORDER_DATE DATE,
	STATUS BIT,
	FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
);
--DROP TABLE ORDERS;

INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (1, 1, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (2, 1, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (3, 3, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (4, 4, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (5, 5, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (6, 5, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (7, 2, '6-4-2024', 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (8, 3, NULL, 1);
INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDER_DATE, STATUS) VALUES (9, 3, NULL, 1);

SELECT * FROM ORDERS;



CREATE TABLE PRODUCTS(
	PRODUCT_ID INT PRIMARY KEY,
	NAME VARCHAR(50),
	CATEGORY VARCHAR(20),
	PRICE FLOAT
);
--DROP TABLE PRODUCTS;

INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (1, 'PRODUCT 1', 'CATEGORY 1', 250.25);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (2, 'PRODUCT 2', 'CATEGORY 2', 890.20);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (3, 'PRODUCT 3', 'CATEGORY 3', 893.25);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (4, 'PRODUCT 4', 'CATEGORY 3', 458.32);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (5, 'PRODUCT 5', 'CATEGORY 2', 789.36);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (6, 'PRODUCT 9', 'CATEGORY 1', 658.74);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (7, 'PRODUCT 7', 'CATEGORY 2', 957.54);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (8, 'PRODUCT 8', 'CATEGORY 2', 524.62);
INSERT INTO PRODUCTS (PRODUCT_ID, NAME, CATEGORY, PRICE) VALUES (9, 'PRODUCT 9', 'CATEGORY 3', 951.35);

SELECT * FROM PRODUCTS;



CREATE TABLE ORDER_DETAILS (
	ORDER_ID INT NOT NULL,
	PRODUCT_ID INT NOT NULL,
	QUANTITY TINYINT,
	PRICE FLOAT,
	FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
)
--DROP TABLE ORDER_DETAILS;

INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (1, 1, 2, 480.25);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (2, 1, 7, 1200.54);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (3, 2, 5, 1000.36);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (4, 3, 3, 900.25);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (5, 9, 1, 1300.35);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (6, 8, 5, 800.62);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (7, 5, 9, 900.36);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (8, 5, 5, NULL);
INSERT INTO ORDER_DETAILS (ORDER_ID, PRODUCT_ID, QUANTITY, PRICE) VALUES (9, 5, 2, NULL);

TRUNCATE TABLE ORDER_DETAILS;
SELECT * FROM ORDER_DETAILS;



CREATE TABLE PAYMENTS(
	PAYMENT_ID INT PRIMARY KEY,
	ORDER_ID INT NOT NULL,
	PAYMENT_DATE DATE,
	AMOUNT FLOAT,
	FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID)
)
--DROP TABLE PAYMENTS;

INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (1, 1, GETDATE(), 960.5);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (2, 2, GETDATE(), 8403.78);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (3, 3, GETDATE(), 5001.8);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (4, 4, GETDATE(), 2700.75);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (5, 5, GETDATE(), 1300.35);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (6, 6, GETDATE(), 4003.1);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (7, 7, GETDATE(), 8103.24);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (8, 8, GETDATE(), NULL);
INSERT INTO PAYMENTS (PAYMENT_ID, ORDER_ID, PAYMENT_DATE, AMOUNT) VALUES (9, 9, GETDATE(), NULL);

SELECT * FROM PAYMENTS;
TRUNCATE TABLE PAYMENTS;


-- TARGET TABLE SALES_SUMMARY
SELECT 
    O.ORDER_ID, 
    O.CUSTOMER_ID, 
    O.ORDER_DATE, 
    O.STATUS, 
    SUM(P.AMOUNT) OVER (PARTITION BY O.CUSTOMER_ID) AS TOTAL_AMOUNT
FROM 
    ORDERS AS O 
INNER JOIN 
    PAYMENTS AS P 
ON 
    O.ORDER_ID = P.ORDER_ID;

-- TARGET TABLE CUSTOMER_SUMMARY
SELECT C.CUSTOMER_ID, C.NAME, C.EMAIL, C.SIGNUP_DATE, COUNT(O.ORDER_ID) AS TOTAL_ORDERS, SUM(P.AMOUNT) AS TOTAL_SPENT
FROM CUSTOMERS AS C 
INNER JOIN ORDERS AS O 
ON O.CUSTOMER_ID = C.CUSTOMER_ID 
INNER JOIN PAYMENTS AS P 
ON P.ORDER_ID = O.ORDER_ID
GROUP BY C.CUSTOMER_ID, C.NAME, C.EMAIL, C.SIGNUP_DATE


--TARGET TABLE PRODUCT_SUMMARY
SELECT DISTINCT P.PRODUCT_ID, P.NAME, P.CATEGORY, SUM(O.QUANTITY) OVER (PARTITION BY P.PRODUCT_ID) as QUANTITY, SUM((A.AMOUNT - (P.PRICE * O.QUANTITY))) OVER (PARTITION BY P.PRODUCT_ID) AS TOTAL_REVENUE
FROM PRODUCTS AS P
INNER JOIN ORDER_DETAILS AS O
ON O.PRODUCT_ID = P.PRODUCT_ID
INNER JOIN PAYMENTS AS A
ON A.ORDER_ID = O.ORDER_ID



